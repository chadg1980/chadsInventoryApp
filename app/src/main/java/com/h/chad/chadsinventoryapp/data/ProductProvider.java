package com.h.chad.chadsinventoryapp.data;

import android.content.ContentProvider;

import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.support.annotation.Nullable;
import android.util.Log;

import com.h.chad.chadsinventoryapp.data.ProductContract.ProductEntry;
import static com.h.chad.chadsinventoryapp.data.ProductContract.CONTENT_AUTHORITY;
import static com.h.chad.chadsinventoryapp.data.ProductContract.PATH_PRODUCTS;
import static com.h.chad.chadsinventoryapp.data.ProductContract.ProductEntry.TABLE_NAME;

/**
 * Created by chad on 2/14/2017.
 * Content Provider Stub Code was autogenerated.
 * Product provider is the class that communicates with the database
 */
public class ProductProvider extends ContentProvider{
    private static final String LOG_TAG = ProductProvider.class.getName();
    //database helper object
    private InventoryDbHelper mDbHelper;
    private static final int PRODUCTS = 100;
    private static final int PRODUCT_ID = 101;
    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    static {
        sUriMatcher.addURI(CONTENT_AUTHORITY, PATH_PRODUCTS, PRODUCTS);
        sUriMatcher.addURI(CONTENT_AUTHORITY, PATH_PRODUCTS + "/#", PRODUCT_ID);
    }

    @Override
    public boolean onCreate() {
        mDbHelper = new InventoryDbHelper(getContext());
        return true;
    }
    /**
     * @param uri
     * @param projection
     * @param selection
     * @param selectioinArgs
     * @param sortOrder
     * @return cursor
     * */
    @Override
    public Cursor query(Uri uri,
                        String[] projection,
                        String selection,
                        String[] selectioinArgs,
                        String sortOrder) {
        //Get the database in readable mode
        SQLiteDatabase db = mDbHelper.getReadableDatabase();
        //Create the Cursor for the return value
        Cursor cursor;
        //find the match to the URI
        int match = sUriMatcher.match(uri);
        //determine which path to take
        switch (match){
            case PRODUCTS:
                cursor = db.query(ProductEntry.TABLE_NAME, projection, selection,
                        selectioinArgs, null, null, sortOrder);
                break;
            case PRODUCT_ID:
                selection = ProductEntry._ID + "=?";
                selectioinArgs = new String[] {String.valueOf(ContentUris.parseId(uri))};
                cursor = db.query(ProductEntry.TABLE_NAME, projection, selection,
                        selectioinArgs, null, null, sortOrder);
                break;
            default:
                throw new IllegalArgumentException(LOG_TAG + " Can't query unknown URI" + uri);
        }
        //Set notification URI on the Cursor so we know what content URI the Cursor was created for
        //If the data at this URI changes, we need to update the cursor
        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    /**
     * takes the Uri and returns the MIME type of data for
     * the content URI as a String
     * @param uri
     * @return String;
     * */
    @Override
    public String getType(Uri uri) {
        final int match = sUriMatcher.match(uri);
        switch (match){
            case PRODUCTS:
                return ProductEntry.CONTENT_LIST_TYPE;
            case PRODUCT_ID:
                return ProductEntry.CONTENT_ITEM_TYPE;
            default:
                throw new IllegalArgumentException("Unknown Uri " + uri + " with match " + match);
        }
    }

    /**
     * @param uri
     * @param values
     * @return uri
     * */
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        final int match = sUriMatcher.match(uri);
        switch (match){
            case PRODUCTS:
                Uri returnUri = insertProduct(uri, values);
                Log.e(LOG_TAG, "Insertion successful" + returnUri);
                return returnUri;
            default:
                throw new IllegalArgumentException("Indertiion failed for " + uri);
        }
    }

    private Uri insertProduct(Uri uri, ContentValues values) {
        String name = values.getAsString(ProductEntry.PRODUCT_NAME);
        if(name == null)
            throw  new IllegalArgumentException("name is null");
        String description = values.getAsString(ProductEntry.PRODUCT_DESCRIPTION);
        if(description == null)
            throw  new IllegalArgumentException("description is null");
        //No check for unit price, the db will default with $99,999.99
        Integer unitPrice = values.getAsInteger(ProductEntry.PRODUCT_PRICE);
        Integer inStock = values.getAsInteger(ProductEntry.PRODUCT_QUANTITY);
        if(inStock == null || inStock <0 )
            throw  new IllegalArgumentException("inStock is null");

        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        long id = db.insert(TABLE_NAME, null, values);
        if(id == -1){
            Log.e(LOG_TAG, "insertion failed for uri " + uri);
            return null;
        }
        getContext().getContentResolver().notifyChange(uri, null);

        return ContentUris.withAppendedId(uri, id);
    }

    @Override
    public int delete(Uri uri, String selection, String[] args) {
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        int rowsDeleted = 0;
        final int match = sUriMatcher.match(uri);
        switch (match){
            //This will delete all products!
            case PRODUCTS:
                rowsDeleted = db.delete(ProductEntry.TABLE_NAME, selection, args);
                break;
            case PRODUCT_ID:
                //delete a single row (products)
                selection = ProductEntry._ID + "=?";
                args = new String []{String.valueOf(ContentUris.parseId(uri))};
                rowsDeleted = db.delete(ProductEntry.TABLE_NAME, selection, args);
                break;
            default:
                throw new IllegalArgumentException("Deletion is not available. URI: "+ uri );
        }
        if(rowsDeleted != 0){
            getContext().getContentResolver().notifyChange(uri, null);
        }
        return rowsDeleted;

    }
    /**
     * @param uri
     * @param values
     * @param selection
     * @param args
     * @return rowsAffected
     * */
    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] args) {
        final int match = sUriMatcher.match(uri);
        switch (match){
            case PRODUCTS:
                return updateProduct(uri, values, selection, args);
            case PRODUCT_ID:
                //If there was an ID in the URI, we need to get the data from the URI
                //so we know which row to updaet. Selection will be "_id=?" and selection
                //arg will be a string array containing the actual id
                selection = ProductEntry._ID + "=?";
                args = new String [] {String.valueOf(ContentUris.parseId(uri))};
                return updateProduct(uri, values, selection, args);
            default:
                throw new IllegalArgumentException("Update is not supported for uri " + uri);
        }
    }
    private int updateProduct(Uri uri, ContentValues values, String selection, String[] args) {

        int rowsAffected = 0;
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        rowsAffected = db.update(ProductEntry.TABLE_NAME, values, selection, args);
        if(rowsAffected != 0){
            getContext().getContentResolver().notifyChange(uri, null);
        }
        return rowsAffected;
    }
}

